require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DebtsController, type: :controller do
  let(:valid_attributes) do
    build(:debt).attributes
  end

  let(:invalid_attributes) do
    build(:debt, account: nil).attributes
  end

  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all debts as @debts' do
      debt = Debt.create! valid_attributes
      login(debt.owner)
      get :index, {}, valid_session
      expect(assigns(:debts)).to eq([debt])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested debt as @debt' do
      debt = Debt.create! valid_attributes
      login(debt.owner)
      get :show, { id: debt.to_param }, valid_session
      expect(assigns(:debt)).to eq(debt)
    end
  end

  describe 'GET #new' do
    it 'assigns a new debt as @debt' do
      login_user
      get :new, {}, valid_session
      expect(assigns(:debt)).to be_a_new(Debt)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested debt as @debt' do
      debt = Debt.create! valid_attributes
      login(debt.owner)
      get :edit, { id: debt.to_param }, valid_session
      expect(assigns(:debt)).to eq(debt)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      before(:each) { login_user }
      it 'creates a new Debt' do
        expect do
          post :create, { debt: valid_attributes }, valid_session
        end.to change(Debt, :count).by(1)
      end

      it 'assigns a newly created debt as @debt' do
        post :create, { debt: valid_attributes }, valid_session
        expect(assigns(:debt)).to be_a(Debt)
        expect(assigns(:debt)).to be_persisted
      end

      it 'redirects to the created debt' do
        post :create, { debt: valid_attributes }, valid_session
        expect(response).to redirect_to(Debt.last)
      end
    end

    context 'with invalid params' do
      before(:each) { login_user }
      it 'assigns a newly created but unsaved debt as @debt' do
        post :create, { debt: invalid_attributes }, valid_session
        expect(assigns(:debt)).to be_a_new(Debt)
      end

      it "re-renders the 'new' template" do
        post :create, { debt: invalid_attributes }, valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        build(:debt, name: 'newDebt').attributes
      end

      it 'updates the requested debt' do
        debt = Debt.create! valid_attributes
        login(debt.owner)
        put :update, { id: debt.to_param, debt: new_attributes }, valid_session
        debt.reload
        expect(debt.name).to eq('NewDebt')
      end

      it 'assigns the requested debt as @debt' do
        debt = Debt.create! valid_attributes
        login(debt.owner)
        put :update, { id: debt.to_param, debt: valid_attributes }, valid_session
        expect(assigns(:debt)).to eq(debt)
      end

      it 'redirects to the debt' do
        debt = Debt.create! valid_attributes
        login(debt.owner)
        put :update, { id: debt.to_param, debt: valid_attributes }, valid_session
        expect(response).to redirect_to(debt)
      end
    end

    context 'with invalid params' do
      it 'assigns the debt as @debt' do
        debt = Debt.create! valid_attributes
        login(debt.owner)
        put :update, { id: debt.to_param, debt: invalid_attributes }, valid_session
        expect(assigns(:debt)).to eq(debt)
      end

      it "re-renders the 'edit' template" do
        debt = Debt.create! valid_attributes
        login(debt.owner)
        put :update, { id: debt.to_param, debt: invalid_attributes }, valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested debt' do
      debt = Debt.create! valid_attributes
      login(debt.owner)
      delete :destroy, { id: debt.to_param }, valid_session
      debt.reload
      expect(debt.deleted_at).not_to be_nil
    end

    it 'redirects to the debts list' do
      debt = Debt.create! valid_attributes
      login(debt.owner)
      delete :destroy, { id: debt.to_param }, valid_session
      expect(response).to redirect_to(debts_url)
    end
  end
end
